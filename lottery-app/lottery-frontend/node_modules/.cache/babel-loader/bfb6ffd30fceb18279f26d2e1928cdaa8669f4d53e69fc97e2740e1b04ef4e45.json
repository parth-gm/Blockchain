{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ETH_DATA_FORMAT } from 'web3-types';\nimport { isNullish } from 'web3-validator';\nimport { ContractExecutionError, InvalidResponseError, TransactionPollingTimeoutError, TransactionRevertedWithoutReasonError, TransactionRevertInstructionError, TransactionRevertWithCustomError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { watchTransactionForConfirmations } from './watch_transaction_for_confirmations.js';\nimport { ALL_EVENTS_ABI } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionError } from './get_transaction_error.js';\n// eslint-disable-next-line import/no-cycle\nimport { getRevertReason } from './get_revert_reason.js';\nimport { decodeEventABI } from './decoding.js';\nexport class SendTxHelper {\n  constructor(_ref) {\n    let {\n      options,\n      web3Context,\n      promiEvent,\n      returnFormat\n    } = _ref;\n    this.options = {\n      checkRevertBeforeSending: true\n    };\n    this.options = options;\n    this.web3Context = web3Context;\n    this.promiEvent = promiEvent;\n    this.returnFormat = returnFormat;\n  }\n  getReceiptWithEvents(data) {\n    var _a, _b;\n    const result = Object.assign({}, data !== null && data !== void 0 ? data : {});\n    if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.contractAbi) && result.logs && result.logs.length > 0) {\n      result.events = {};\n      for (const log of result.logs) {\n        const event = decodeEventABI(ALL_EVENTS_ABI, log, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi, this.returnFormat);\n        if (event.event) {\n          result.events[event.event] = event;\n        }\n      }\n    }\n    return result;\n  }\n  checkRevertBeforeSending(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.options.checkRevertBeforeSending !== false) {\n        let formatTx = tx;\n        if (isNullish(tx.data) && isNullish(tx.input) && isNullish(tx.gas)) {\n          // eth.call runs into error if data isnt filled and gas is not defined, its a simple transaction so we fill it with 21000\n          formatTx = Object.assign(Object.assign({}, tx), {\n            gas: 21000\n          });\n        }\n        const reason = yield getRevertReason(this.web3Context, formatTx, this.options.contractAbi);\n        if (reason !== undefined) {\n          throw yield getTransactionError(this.web3Context, tx, undefined, undefined, this.options.contractAbi, reason);\n        }\n      }\n    });\n  }\n  emitSending(tx) {\n    if (this.promiEvent.listenerCount('sending') > 0) {\n      this.promiEvent.emit('sending', tx);\n    }\n  }\n  populateGasPrice(_a) {\n    return __awaiter(this, arguments, void 0, function (_ref2) {\n      var _this = this;\n      let {\n        transactionFormatted,\n        transaction\n      } = _ref2;\n      return function* () {\n        var _b;\n        let result = transactionFormatted;\n        if (!_this.web3Context.config.ignoreGasPricing && !((_b = _this.options) === null || _b === void 0 ? void 0 : _b.ignoreGasPricing) && isNullish(transactionFormatted.gasPrice) && (isNullish(transaction.maxPriorityFeePerGas) || isNullish(transaction.maxFeePerGas))) {\n          result = Object.assign(Object.assign({}, transactionFormatted), yield getTransactionGasPricing(transactionFormatted, _this.web3Context, ETH_DATA_FORMAT));\n        }\n        return result;\n      }();\n    });\n  }\n  signAndSend(_a) {\n    return __awaiter(this, arguments, void 0, function (_ref3) {\n      var _this2 = this;\n      let {\n        wallet,\n        tx\n      } = _ref3;\n      return function* () {\n        if (wallet) {\n          const signedTransaction = yield wallet.signTransaction(tx);\n          return trySendTransaction(_this2.web3Context, () => __awaiter(_this2, void 0, void 0, function* () {\n            return ethRpcMethods.sendRawTransaction(this.web3Context.requestManager, signedTransaction.rawTransaction);\n          }), signedTransaction.transactionHash);\n        }\n        return trySendTransaction(_this2.web3Context, () => __awaiter(_this2, void 0, void 0, function* () {\n          return ethRpcMethods.sendTransaction(this.web3Context.requestManager, tx);\n        }));\n      }();\n    });\n  }\n  emitSent(tx) {\n    if (this.promiEvent.listenerCount('sent') > 0) {\n      this.promiEvent.emit('sent', tx);\n    }\n  }\n  emitTransactionHash(hash) {\n    if (this.promiEvent.listenerCount('transactionHash') > 0) {\n      this.promiEvent.emit('transactionHash', hash);\n    }\n  }\n  emitReceipt(receipt) {\n    if (this.promiEvent.listenerCount('receipt') > 0) {\n      this.promiEvent.emit('receipt',\n      // @ts-expect-error unknown type fix\n      receipt);\n    }\n  }\n  handleError(_a) {\n    return __awaiter(this, arguments, void 0, function (_ref4) {\n      var _this3 = this;\n      let {\n        error,\n        tx\n      } = _ref4;\n      return function* () {\n        var _b;\n        let _error = error;\n        if (_error instanceof ContractExecutionError && _this3.web3Context.handleRevert) {\n          _error = yield getTransactionError(_this3.web3Context, tx, undefined, undefined, (_b = _this3.options) === null || _b === void 0 ? void 0 : _b.contractAbi);\n        }\n        if ((_error instanceof InvalidResponseError || _error instanceof ContractExecutionError || _error instanceof TransactionRevertWithCustomError || _error instanceof TransactionRevertedWithoutReasonError || _error instanceof TransactionRevertInstructionError || _error instanceof TransactionPollingTimeoutError) && _this3.promiEvent.listenerCount('error') > 0) {\n          _this3.promiEvent.emit('error', _error);\n        }\n        return _error;\n      }();\n    });\n  }\n  emitConfirmation(_ref5) {\n    let {\n      receipt,\n      transactionHash,\n      customTransactionReceiptSchema\n    } = _ref5;\n    if (this.promiEvent.listenerCount('confirmation') > 0) {\n      watchTransactionForConfirmations(this.web3Context, this.promiEvent, receipt, transactionHash, this.returnFormat, customTransactionReceiptSchema);\n    }\n  }\n  handleResolve(_a) {\n    return __awaiter(this, arguments, void 0, function (_ref6) {\n      var _this4 = this;\n      let {\n        receipt,\n        tx\n      } = _ref6;\n      return function* () {\n        var _b, _c, _d;\n        if ((_b = _this4.options) === null || _b === void 0 ? void 0 : _b.transactionResolver) {\n          return (_c = _this4.options) === null || _c === void 0 ? void 0 : _c.transactionResolver(receipt);\n        }\n        if (receipt.status === BigInt(0)) {\n          const error = yield getTransactionError(_this4.web3Context, tx,\n          // @ts-expect-error unknown type fix\n          receipt, undefined, (_d = _this4.options) === null || _d === void 0 ? void 0 : _d.contractAbi);\n          if (_this4.promiEvent.listenerCount('error') > 0) {\n            _this4.promiEvent.emit('error', error);\n          }\n          throw error;\n        } else {\n          return receipt;\n        }\n      }();\n    });\n  }\n}","map":{"version":3,"names":["ETH_DATA_FORMAT","isNullish","ContractExecutionError","InvalidResponseError","TransactionPollingTimeoutError","TransactionRevertedWithoutReasonError","TransactionRevertInstructionError","TransactionRevertWithCustomError","ethRpcMethods","getTransactionGasPricing","trySendTransaction","watchTransactionForConfirmations","ALL_EVENTS_ABI","getTransactionError","getRevertReason","decodeEventABI","SendTxHelper","constructor","_ref","options","web3Context","promiEvent","returnFormat","checkRevertBeforeSending","getReceiptWithEvents","data","result","Object","assign","_a","contractAbi","logs","length","events","log","event","_b","tx","formatTx","input","gas","reason","undefined","emitSending","listenerCount","emit","populateGasPrice","transactionFormatted","transaction","_ref2","_this","config","ignoreGasPricing","gasPrice","maxPriorityFeePerGas","maxFeePerGas","signAndSend","wallet","_ref3","signedTransaction","signTransaction","_this2","__awaiter","sendRawTransaction","requestManager","rawTransaction","transactionHash","sendTransaction","emitSent","emitTransactionHash","hash","emitReceipt","receipt","handleError","error","_ref4","_error","_this3","handleRevert","emitConfirmation","_ref5","customTransactionReceiptSchema","handleResolve","_ref6","_this4","transactionResolver","_c","status","BigInt","_d"],"sources":["/Users/admin/Documents/gochat/lottery-react/node_modules/web3-eth/src/utils/send_tx_helper.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tEthExecutionAPI,\n\tTransactionWithSenderAPI,\n\tWeb3BaseWalletAccount,\n\tHexString,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tLogsInput,\n\tTransactionHash,\n\tContractAbiWithSignature,\n} from 'web3-types';\nimport { Web3Context, Web3EventEmitter, Web3PromiEvent } from 'web3-core';\nimport { isNullish, JsonSchema } from 'web3-validator';\nimport {\n\tContractExecutionError,\n\tInvalidResponseError,\n\tTransactionPollingTimeoutError,\n\tTransactionRevertedWithoutReasonError,\n\tTransactionRevertInstructionError,\n\tTransactionRevertWithCustomError,\n} from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport {\n\tInternalTransaction,\n\tSendSignedTransactionEvents,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { watchTransactionForConfirmations } from './watch_transaction_for_confirmations.js';\nimport { ALL_EVENTS_ABI } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionError } from './get_transaction_error.js';\n// eslint-disable-next-line import/no-cycle\nimport { getRevertReason } from './get_revert_reason.js';\nimport { decodeEventABI } from './decoding.js';\n\nexport class SendTxHelper<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n\tTxType =\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n> {\n\tprivate readonly web3Context: Web3Context<EthExecutionAPI>;\n\tprivate readonly promiEvent: Web3PromiEvent<\n\t\tResolveType,\n\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>\n\t>;\n\tprivate readonly options: SendTransactionOptions<ResolveType> = {\n\t\tcheckRevertBeforeSending: true,\n\t};\n\tprivate readonly returnFormat: ReturnFormat;\n\tpublic constructor({\n\t\toptions,\n\t\tweb3Context,\n\t\tpromiEvent,\n\t\treturnFormat,\n\t}: {\n\t\tweb3Context: Web3Context<EthExecutionAPI>;\n\t\toptions: SendTransactionOptions<ResolveType>;\n\t\tpromiEvent: Web3PromiEvent<\n\t\t\tResolveType,\n\t\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>\n\t\t>;\n\t\treturnFormat: ReturnFormat;\n\t}) {\n\t\tthis.options = options;\n\t\tthis.web3Context = web3Context;\n\t\tthis.promiEvent = promiEvent;\n\t\tthis.returnFormat = returnFormat;\n\t}\n\n\tpublic getReceiptWithEvents(data: TransactionReceipt): ResolveType {\n\t\tconst result = { ...(data ?? {}) };\n\t\tif (this.options?.contractAbi && result.logs && result.logs.length > 0) {\n\t\t\tresult.events = {};\n\t\t\tfor (const log of result.logs) {\n\t\t\t\tconst event = decodeEventABI(\n\t\t\t\t\tALL_EVENTS_ABI,\n\t\t\t\t\tlog as LogsInput,\n\t\t\t\t\tthis.options?.contractAbi as ContractAbiWithSignature,\n\t\t\t\t\tthis.returnFormat,\n\t\t\t\t);\n\t\t\t\tif (event.event) {\n\t\t\t\t\tresult.events[event.event] = event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result as unknown as ResolveType;\n\t}\n\n\tpublic async checkRevertBeforeSending(tx: TransactionCall) {\n\t\tif (this.options.checkRevertBeforeSending !== false) {\n\t\t\tlet formatTx = tx;\n\t\t\tif (isNullish(tx.data) && isNullish(tx.input) && isNullish(tx.gas)) {\n\t\t\t\t// eth.call runs into error if data isnt filled and gas is not defined, its a simple transaction so we fill it with 21000\n\t\t\t\tformatTx = {\n\t\t\t\t\t...tx,\n\t\t\t\t\tgas: 21000,\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst reason = await getRevertReason(\n\t\t\t\tthis.web3Context,\n\t\t\t\tformatTx,\n\t\t\t\tthis.options.contractAbi,\n\t\t\t);\n\t\t\tif (reason !== undefined) {\n\t\t\t\tthrow await getTransactionError<ReturnFormat>(\n\t\t\t\t\tthis.web3Context,\n\t\t\t\t\ttx,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tthis.options.contractAbi,\n\t\t\t\t\treason,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic emitSending(tx: TxType | HexString) {\n\t\tif (this.promiEvent.listenerCount('sending') > 0) {\n\t\t\tthis.promiEvent.emit(\n\t\t\t\t'sending',\n\t\t\t\ttx as\n\t\t\t\t\t| SendSignedTransactionEvents<ReturnFormat>['sending']\n\t\t\t\t\t| SendTransactionEvents<ReturnFormat>['sending'],\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async populateGasPrice({\n\t\ttransactionFormatted,\n\t\ttransaction,\n\t}: {\n\t\ttransactionFormatted: TxType;\n\t\ttransaction: TxType;\n\t}): Promise<TxType> {\n\t\tlet result = transactionFormatted;\n\t\tif (\n\t\t\t!this.web3Context.config.ignoreGasPricing &&\n\t\t\t!this.options?.ignoreGasPricing &&\n\t\t\tisNullish((transactionFormatted as Transaction).gasPrice) &&\n\t\t\t(isNullish((transaction as Transaction).maxPriorityFeePerGas) ||\n\t\t\t\tisNullish((transaction as Transaction).maxFeePerGas))\n\t\t) {\n\t\t\tresult = {\n\t\t\t\t...transactionFormatted,\n\t\t\t\t// @TODO gasPrice, maxPriorityFeePerGas, maxFeePerGas\n\t\t\t\t// should not be included if undefined, but currently are\n\t\t\t\t...(await getTransactionGasPricing(\n\t\t\t\t\ttransactionFormatted as InternalTransaction,\n\t\t\t\t\tthis.web3Context,\n\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t)),\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic async signAndSend({\n\t\twallet,\n\t\ttx,\n\t}: {\n\t\twallet: Web3BaseWalletAccount | undefined;\n\t\ttx: TxType;\n\t}) {\n\t\tif (wallet) {\n\t\t\tconst signedTransaction = await wallet.signTransaction(tx as Transaction);\n\n\t\t\treturn trySendTransaction(\n\t\t\t\tthis.web3Context,\n\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\tthis.web3Context.requestManager,\n\t\t\t\t\t\tsignedTransaction.rawTransaction,\n\t\t\t\t\t),\n\t\t\t\tsignedTransaction.transactionHash,\n\t\t\t);\n\t\t}\n\t\treturn trySendTransaction(\n\t\t\tthis.web3Context,\n\t\t\tasync (): Promise<string> =>\n\t\t\t\tethRpcMethods.sendTransaction(\n\t\t\t\t\tthis.web3Context.requestManager,\n\t\t\t\t\ttx as Partial<TransactionWithSenderAPI>,\n\t\t\t\t),\n\t\t);\n\t}\n\n\tpublic emitSent(tx: TxType | HexString) {\n\t\tif (this.promiEvent.listenerCount('sent') > 0) {\n\t\t\tthis.promiEvent.emit(\n\t\t\t\t'sent',\n\t\t\t\ttx as\n\t\t\t\t\t| SendSignedTransactionEvents<ReturnFormat>['sent']\n\t\t\t\t\t| SendTransactionEvents<ReturnFormat>['sent'],\n\t\t\t);\n\t\t}\n\t}\n\tpublic emitTransactionHash(hash: string & Uint8Array) {\n\t\tif (this.promiEvent.listenerCount('transactionHash') > 0) {\n\t\t\tthis.promiEvent.emit('transactionHash', hash);\n\t\t}\n\t}\n\n\tpublic emitReceipt(receipt: ResolveType) {\n\t\tif (this.promiEvent.listenerCount('receipt') > 0) {\n\t\t\t(\n\t\t\t\tthis.promiEvent as Web3EventEmitter<\n\t\t\t\t\tSendTransactionEvents<ReturnFormat> | SendSignedTransactionEvents<ReturnFormat>\n\t\t\t\t>\n\t\t\t).emit(\n\t\t\t\t'receipt',\n\t\t\t\t// @ts-expect-error unknown type fix\n\t\t\t\treceipt,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async handleError({ error, tx }: { error: unknown; tx: TransactionCall }) {\n\t\tlet _error = error;\n\n\t\tif (_error instanceof ContractExecutionError && this.web3Context.handleRevert) {\n\t\t\t_error = await getTransactionError(\n\t\t\t\tthis.web3Context,\n\t\t\t\ttx,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\tthis.options?.contractAbi,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\t(_error instanceof InvalidResponseError ||\n\t\t\t\t_error instanceof ContractExecutionError ||\n\t\t\t\t_error instanceof TransactionRevertWithCustomError ||\n\t\t\t\t_error instanceof TransactionRevertedWithoutReasonError ||\n\t\t\t\t_error instanceof TransactionRevertInstructionError ||\n\t\t\t\t_error instanceof TransactionPollingTimeoutError) &&\n\t\t\tthis.promiEvent.listenerCount('error') > 0\n\t\t) {\n\t\t\tthis.promiEvent.emit('error', _error);\n\t\t}\n\n\t\treturn _error;\n\t}\n\n\tpublic emitConfirmation({\n\t\treceipt,\n\t\ttransactionHash,\n\t\tcustomTransactionReceiptSchema,\n\t}: {\n\t\treceipt: ResolveType;\n\t\ttransactionHash: TransactionHash;\n\t\tcustomTransactionReceiptSchema?: JsonSchema;\n\t}) {\n\t\tif (this.promiEvent.listenerCount('confirmation') > 0) {\n\t\t\twatchTransactionForConfirmations<\n\t\t\t\tReturnFormat,\n\t\t\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>,\n\t\t\t\tResolveType\n\t\t\t>(\n\t\t\t\tthis.web3Context,\n\t\t\t\tthis.promiEvent,\n\t\t\t\treceipt as unknown as TransactionReceipt,\n\t\t\t\ttransactionHash,\n\t\t\t\tthis.returnFormat,\n\t\t\t\tcustomTransactionReceiptSchema,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async handleResolve({ receipt, tx }: { receipt: ResolveType; tx: TransactionCall }) {\n\t\tif (this.options?.transactionResolver) {\n\t\t\treturn this.options?.transactionResolver(receipt as unknown as TransactionReceipt);\n\t\t}\n\t\tif ((receipt as unknown as TransactionReceipt).status === BigInt(0)) {\n\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\tthis.web3Context,\n\t\t\t\ttx,\n\t\t\t\t// @ts-expect-error unknown type fix\n\t\t\t\treceipt,\n\t\t\t\tundefined,\n\t\t\t\tthis.options?.contractAbi,\n\t\t\t);\n\t\t\tif (this.promiEvent.listenerCount('error') > 0) {\n\t\t\t\tthis.promiEvent.emit('error', error);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t} else {\n\t\t\treturn receipt;\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}