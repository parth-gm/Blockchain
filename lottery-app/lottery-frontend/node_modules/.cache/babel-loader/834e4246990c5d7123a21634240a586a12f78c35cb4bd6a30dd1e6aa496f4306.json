{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/gochat/lottery-react/src/App.js\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React from \"react\";\nimport web3 from \"./web3\";\nimport lottery from \"./lottery\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      manager: ''\n    };\n  }\n\n  // component renders --> componentDidMount() is called --> call method on contract --> set data on 'state' \n  async componentDidMount() {\n    const manager = lottery.methods.manager().call(); /// no need to specify from field as metamask has defaukt account already set\n    this.setState({\n      manager: manager\n    });\n    console.log(\"App component is mounted\");\n  }\n  render() {\n    console.log(\"App component is rendered\");\n    web3.eth.getAccounts().then(console.log);\n    console.log(web3.version);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Lottery Contract\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"This contract is managed by \", this.state.manager, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["logo","React","web3","lottery","jsxDEV","_jsxDEV","App","Component","constructor","props","state","manager","componentDidMount","methods","call","setState","console","log","render","eth","getAccounts","then","version","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/admin/Documents/gochat/lottery-react/src/App.js"],"sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React from \"react\";\nimport web3 from \"./web3\";\nimport lottery from \"./lottery\";\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = { manager: '' };\n  }\n\n  // component renders --> componentDidMount() is called --> call method on contract --> set data on 'state' \n  async componentDidMount() {\n    const manager = lottery.methods.manager().call(); /// no need to specify from field as metamask has defaukt account already set\n    this.setState({ manager: manager });\n    console.log(\"App component is mounted\");\n  }\n\n  render() {\n    console.log(\"App component is rendered\");\n    web3.eth.getAccounts().then(console.log);\n    console.log(web3.version);\n    return (\n    <div>\n      <h2>Lottery Contract</h2>\n      <p>This contract is managed by {this.state.manager} </p>\n    </div>\n    );\n  }\n}\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,GAAG,SAASL,KAAK,CAACM,SAAS,CAAC;EAEhCC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MAAEC,OAAO,EAAE;IAAG,CAAC;EAC9B;;EAEA;EACA,MAAMC,iBAAiBA,CAAA,EAAG;IACxB,MAAMD,OAAO,GAAGR,OAAO,CAACU,OAAO,CAACF,OAAO,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;IAClD,IAAI,CAACC,QAAQ,CAAC;MAAEJ,OAAO,EAAEA;IAAQ,CAAC,CAAC;IACnCK,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EACzC;EAEAC,MAAMA,CAAA,EAAG;IACPF,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxCf,IAAI,CAACiB,GAAG,CAACC,WAAW,CAAC,CAAC,CAACC,IAAI,CAACL,OAAO,CAACC,GAAG,CAAC;IACxCD,OAAO,CAACC,GAAG,CAACf,IAAI,CAACoB,OAAO,CAAC;IACzB,oBACAjB,OAAA;MAAAkB,QAAA,gBACElB,OAAA;QAAAkB,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBtB,OAAA;QAAAkB,QAAA,GAAG,8BAA4B,EAAC,IAAI,CAACb,KAAK,CAACC,OAAO,EAAC,GAAC;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC;EAER;AACF;AACA,eAAerB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}